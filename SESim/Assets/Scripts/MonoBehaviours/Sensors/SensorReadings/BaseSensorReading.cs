/// <summary>
/// Atomic implementation for sensor data generated from sensor game objects.
/// This implementation, most importantly, does not have a sensor value and returns
/// a zero value if prompted for a sensor value.
/// </summary>
[System.Serializable]
public class BaseSensorReading
{
    public Sensor.Type sensorType;      // Enum describing the type of sensor which generated this sensor reading.
    public string areaName;             // String which indicates the area (parent game object) where the sensor reading was generated.
    public string sensorName;           // Unique identifier for the sensor which generated this sensor reading.
    public System.DateTime dateTime;    // Date and time of when this sensor reading was generated by a sensor game object.
    public string sensorBookmarkName;   // String which describes the sensor bookmark associated with this generated sensor reading.
    public int sessionID;               // Unique identifier associated with sensor reading

    public virtual void SetDateTime(int year, int month, int day, int hours, int minutes, int seconds)
    {
        dateTime = new System.DateTime(year, month, day, hours, minutes, seconds);
    }

    public virtual string GetSensorReadingString()
    {
        return dateTime.ToShortDateString() + ";"
            + dateTime.ToShortTimeString() + ";"
            + sensorType.ToString() + ";" + areaName + ";" + sensorName;
    }

    public virtual int CompareToDateTime(BaseSensorReading anotherSensorReading)
    {
        return dateTime.CompareTo(anotherSensorReading.dateTime);
    }

    public virtual float GetSensorValue()
    {
        return 0f;
    }

}
